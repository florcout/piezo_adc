
piezo_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000070c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080008d4  080008d4  000108d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000900  08000900  00010900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000904  08000904  00010904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000004  0800090c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  0800090c  00020020  2**0
                  ALLOC
  8 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001228  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000501  00000000  00000000  00021256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000138  00000000  00000000  00021758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000e0  00000000  00000000  00021890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001ba93  00000000  00000000  00021970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000018a5  00000000  00000000  0003d403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0009b384  00000000  00000000  0003eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000da02c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000328  00000000  00000000  000da080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080008bc 	.word	0x080008bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	080008bc 	.word	0x080008bc

08000208 <main>:
 *      Author: florent
 */
#include "stm32f7xx.h"

int main()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	uint32_t i;

	SystemCoreClockUpdate();
 800020c:	f000 fab2 	bl	8000774 <SystemCoreClockUpdate>

	BSP_Console_Init();
 8000210:	f000 fa2a 	bl	8000668 <BSP_Console_Init>
	my_printf("Console ready!\r\n");
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <main+0x40>)
 8000216:	f000 f9e9 	bl	80005ec <my_printf>

	// Start GPIOA clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <main+0x44>)
 800021c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021e:	4a0b      	ldr	r2, [pc, #44]	; (800024c <main+0x44>)
 8000220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000224:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA5 as output
	GPIOI->MODER &= ~GPIO_MODER_MODER1_Msk;
 8000226:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <main+0x48>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a09      	ldr	r2, [pc, #36]	; (8000250 <main+0x48>)
 800022c:	f023 030c 	bic.w	r3, r3, #12
 8000230:	6013      	str	r3, [r2, #0]
	GPIOI->MODER |= (0x01 <<GPIO_MODER_MODER1_Pos);
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <main+0x48>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a06      	ldr	r2, [pc, #24]	; (8000250 <main+0x48>)
 8000238:	f043 0304 	orr.w	r3, r3, #4
 800023c:	6013      	str	r3, [r2, #0]
		/*// LED toggle
		GPIOI->ODR ^= GPIO_ODR_OD1;

		// Wait
		for(i=0; i<100000; i++);*/
		GPIOI->BSRR = GPIO_BSRR_BS1;
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <main+0x48>)
 8000240:	2202      	movs	r2, #2
 8000242:	619a      	str	r2, [r3, #24]
 8000244:	e7fb      	b.n	800023e <main+0x36>
 8000246:	bf00      	nop
 8000248:	080008d4 	.word	0x080008d4
 800024c:	40023800 	.word	0x40023800
 8000250:	40022000 	.word	0x40022000

08000254 <printchar>:

#include <stdarg.h>
#include "stm32f7xx.h"

static void printchar(char **str, int c)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	6039      	str	r1, [r7, #0]
	if (str) {
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d00a      	beq.n	800027a <printchar+0x26>
		**str = c;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	683a      	ldr	r2, [r7, #0]
 800026a:	b2d2      	uxtb	r2, r2
 800026c:	701a      	strb	r2, [r3, #0]
		++(*str);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART3->TDR = c;
	}
}
 8000278:	e009      	b.n	800028e <printchar+0x3a>
		while ( (USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 800027a:	bf00      	nop
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <printchar+0x44>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000284:	2b40      	cmp	r3, #64	; 0x40
 8000286:	d1f9      	bne.n	800027c <printchar+0x28>
		USART3->TDR = c;
 8000288:	4a03      	ldr	r2, [pc, #12]	; (8000298 <printchar+0x44>)
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40004800 	.word	0x40004800

0800029c <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 800029c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002a0:	b084      	sub	sp, #16
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	60f8      	str	r0, [r7, #12]
 80002a6:	60b9      	str	r1, [r7, #8]
 80002a8:	607a      	str	r2, [r7, #4]
 80002aa:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80002ac:	2400      	movs	r4, #0
 80002ae:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	dd17      	ble.n	80002e8 <prints+0x4c>
		register int len = 0;
 80002b8:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80002ba:	68be      	ldr	r6, [r7, #8]
 80002bc:	e001      	b.n	80002c2 <prints+0x26>
 80002be:	3501      	adds	r5, #1
 80002c0:	3601      	adds	r6, #1
 80002c2:	7833      	ldrb	r3, [r6, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1fa      	bne.n	80002be <prints+0x22>
		if (len >= width) width = 0;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	429d      	cmp	r5, r3
 80002cc:	db02      	blt.n	80002d4 <prints+0x38>
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	e002      	b.n	80002da <prints+0x3e>
		else width -= len;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	1b5b      	subs	r3, r3, r5
 80002d8:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	f003 0302 	and.w	r3, r3, #2
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <prints+0x4c>
 80002e4:	f04f 0830 	mov.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d116      	bne.n	8000320 <prints+0x84>
		for ( ; width > 0; --width) {
 80002f2:	e007      	b.n	8000304 <prints+0x68>
			printchar (out, padchar);
 80002f4:	4641      	mov	r1, r8
 80002f6:	68f8      	ldr	r0, [r7, #12]
 80002f8:	f7ff ffac 	bl	8000254 <printchar>
			++pc;
 80002fc:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3b01      	subs	r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	dcf4      	bgt.n	80002f4 <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 800030a:	e009      	b.n	8000320 <prints+0x84>
		printchar (out, *string);
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	4619      	mov	r1, r3
 8000312:	68f8      	ldr	r0, [r7, #12]
 8000314:	f7ff ff9e 	bl	8000254 <printchar>
		++pc;
 8000318:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	3301      	adds	r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1f1      	bne.n	800030c <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8000328:	e007      	b.n	800033a <prints+0x9e>
		printchar (out, padchar);
 800032a:	4641      	mov	r1, r8
 800032c:	68f8      	ldr	r0, [r7, #12]
 800032e:	f7ff ff91 	bl	8000254 <printchar>
		++pc;
 8000332:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b00      	cmp	r3, #0
 800033e:	dcf4      	bgt.n	800032a <prints+0x8e>
	}

	return pc;
 8000340:	4623      	mov	r3, r4
}
 8000342:	4618      	mov	r0, r3
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800034c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800034c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000350:	b089      	sub	sp, #36	; 0x24
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800035c:	f04f 0900 	mov.w	r9, #0
 8000360:	2600      	movs	r6, #0
	register unsigned int u = i;
 8000362:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d10c      	bne.n	8000384 <printi+0x38>
		print_buf[0] = '0';
 800036a:	2330      	movs	r3, #48	; 0x30
 800036c:	753b      	strb	r3, [r7, #20]
		print_buf[1] = '\0';
 800036e:	2300      	movs	r3, #0
 8000370:	757b      	strb	r3, [r7, #21]
		return prints (out, print_buf, width, pad);
 8000372:	f107 0114 	add.w	r1, r7, #20
 8000376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800037a:	68f8      	ldr	r0, [r7, #12]
 800037c:	f7ff ff8e 	bl	800029c <prints>
 8000380:	4603      	mov	r3, r0
 8000382:	e04a      	b.n	800041a <printi+0xce>
	}

	if (sg && b == 10 && i < 0) {
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d00a      	beq.n	80003a0 <printi+0x54>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b0a      	cmp	r3, #10
 800038e:	d107      	bne.n	80003a0 <printi+0x54>
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	2b00      	cmp	r3, #0
 8000394:	da04      	bge.n	80003a0 <printi+0x54>
		neg = 1;
 8000396:	f04f 0901 	mov.w	r9, #1
		u = -i;
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	425b      	negs	r3, r3
 800039e:	461d      	mov	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80003a0:	f107 0414 	add.w	r4, r7, #20
 80003a4:	340b      	adds	r4, #11
	*s = '\0';
 80003a6:	2300      	movs	r3, #0
 80003a8:	7023      	strb	r3, [r4, #0]

	while (u) {
 80003aa:	e015      	b.n	80003d8 <printi+0x8c>
		t = u % b;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	fbb5 f2f3 	udiv	r2, r5, r3
 80003b2:	fb03 f302 	mul.w	r3, r3, r2
 80003b6:	1aeb      	subs	r3, r5, r3
 80003b8:	4698      	mov	r8, r3
		if( t >= 10 )
 80003ba:	f1b8 0f09 	cmp.w	r8, #9
 80003be:	dd02      	ble.n	80003c6 <printi+0x7a>
			t += letbase - '0' - 10;
 80003c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003c2:	3b3a      	subs	r3, #58	; 0x3a
 80003c4:	4498      	add	r8, r3
		*--s = t + '0';
 80003c6:	fa5f f388 	uxtb.w	r3, r8
 80003ca:	3c01      	subs	r4, #1
 80003cc:	3330      	adds	r3, #48	; 0x30
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	7023      	strb	r3, [r4, #0]
		u /= b;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	fbb5 f5f3 	udiv	r5, r5, r3
	while (u) {
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d1e7      	bne.n	80003ac <printi+0x60>
	}

	if (neg) {
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	d013      	beq.n	800040a <printi+0xbe>
		if( width && (pad & PAD_ZERO) ) {
 80003e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d00d      	beq.n	8000404 <printi+0xb8>
 80003e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003ea:	f003 0302 	and.w	r3, r3, #2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d008      	beq.n	8000404 <printi+0xb8>
			printchar (out, '-');
 80003f2:	212d      	movs	r1, #45	; 0x2d
 80003f4:	68f8      	ldr	r0, [r7, #12]
 80003f6:	f7ff ff2d 	bl	8000254 <printchar>
			++pc;
 80003fa:	3601      	adds	r6, #1
			--width;
 80003fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003fe:	3b01      	subs	r3, #1
 8000400:	643b      	str	r3, [r7, #64]	; 0x40
 8000402:	e002      	b.n	800040a <printi+0xbe>
		}
		else {
			*--s = '-';
 8000404:	3c01      	subs	r4, #1
 8000406:	232d      	movs	r3, #45	; 0x2d
 8000408:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 800040a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800040c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800040e:	4621      	mov	r1, r4
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff ff43 	bl	800029c <prints>
 8000416:	4603      	mov	r3, r0
 8000418:	4433      	add	r3, r6
}
 800041a:	4618      	mov	r0, r3
 800041c:	3724      	adds	r7, #36	; 0x24
 800041e:	46bd      	mov	sp, r7
 8000420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000424 <print>:

static int print(char **out, const char *format, va_list args )
{
 8000424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000428:	b08a      	sub	sp, #40	; 0x28
 800042a:	af04      	add	r7, sp, #16
 800042c:	60f8      	str	r0, [r7, #12]
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000432:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000434:	e0c4      	b.n	80005c0 <print+0x19c>
		if (*format == '%') {
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b25      	cmp	r3, #37	; 0x25
 800043c:	f040 80b3 	bne.w	80005a6 <print+0x182>
			++format;
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	3301      	adds	r3, #1
 8000444:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000446:	2600      	movs	r6, #0
 8000448:	4635      	mov	r5, r6
			if (*format == '\0') break;
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	f000 80bc 	beq.w	80005cc <print+0x1a8>
			if (*format == '%') goto out;
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b25      	cmp	r3, #37	; 0x25
 800045a:	f000 80a6 	beq.w	80005aa <print+0x186>
			if (*format == '-') {
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b2d      	cmp	r3, #45	; 0x2d
 8000464:	d109      	bne.n	800047a <print+0x56>
				++format;
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	3301      	adds	r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 800046c:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 800046e:	e004      	b.n	800047a <print+0x56>
				++format;
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	3301      	adds	r3, #1
 8000474:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000476:	f046 0602 	orr.w	r6, r6, #2
			while (*format == '0') {
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b30      	cmp	r3, #48	; 0x30
 8000480:	d0f6      	beq.n	8000470 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000482:	e00b      	b.n	800049c <print+0x78>
				width *= 10;
 8000484:	462b      	mov	r3, r5
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	442b      	add	r3, r5
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	461d      	mov	r5, r3
				width += *format - '0';
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	3b30      	subs	r3, #48	; 0x30
 8000494:	441d      	add	r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	3301      	adds	r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b2f      	cmp	r3, #47	; 0x2f
 80004a2:	d903      	bls.n	80004ac <print+0x88>
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b39      	cmp	r3, #57	; 0x39
 80004aa:	d9eb      	bls.n	8000484 <print+0x60>
			}
			if( *format == 's' ) {
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b73      	cmp	r3, #115	; 0x73
 80004b2:	d112      	bne.n	80004da <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	1d1a      	adds	r2, r3, #4
 80004b8:	607a      	str	r2, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 80004be:	f1b8 0f00 	cmp.w	r8, #0
 80004c2:	d001      	beq.n	80004c8 <print+0xa4>
 80004c4:	4641      	mov	r1, r8
 80004c6:	e000      	b.n	80004ca <print+0xa6>
 80004c8:	4947      	ldr	r1, [pc, #284]	; (80005e8 <print+0x1c4>)
 80004ca:	4633      	mov	r3, r6
 80004cc:	462a      	mov	r2, r5
 80004ce:	68f8      	ldr	r0, [r7, #12]
 80004d0:	f7ff fee4 	bl	800029c <prints>
 80004d4:	4603      	mov	r3, r0
 80004d6:	441c      	add	r4, r3
				continue;
 80004d8:	e06f      	b.n	80005ba <print+0x196>
			}
			if( *format == 'd' ) {
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b64      	cmp	r3, #100	; 0x64
 80004e0:	d10f      	bne.n	8000502 <print+0xde>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	1d1a      	adds	r2, r3, #4
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	2361      	movs	r3, #97	; 0x61
 80004ec:	9302      	str	r3, [sp, #8]
 80004ee:	9601      	str	r6, [sp, #4]
 80004f0:	9500      	str	r5, [sp, #0]
 80004f2:	2301      	movs	r3, #1
 80004f4:	220a      	movs	r2, #10
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f7ff ff28 	bl	800034c <printi>
 80004fc:	4603      	mov	r3, r0
 80004fe:	441c      	add	r4, r3
				continue;
 8000500:	e05b      	b.n	80005ba <print+0x196>
			}
			if( *format == 'x' ) {
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b78      	cmp	r3, #120	; 0x78
 8000508:	d10f      	bne.n	800052a <print+0x106>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	1d1a      	adds	r2, r3, #4
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	6819      	ldr	r1, [r3, #0]
 8000512:	2361      	movs	r3, #97	; 0x61
 8000514:	9302      	str	r3, [sp, #8]
 8000516:	9601      	str	r6, [sp, #4]
 8000518:	9500      	str	r5, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2210      	movs	r2, #16
 800051e:	68f8      	ldr	r0, [r7, #12]
 8000520:	f7ff ff14 	bl	800034c <printi>
 8000524:	4603      	mov	r3, r0
 8000526:	441c      	add	r4, r3
				continue;
 8000528:	e047      	b.n	80005ba <print+0x196>
			}
			if( *format == 'X' ) {
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b58      	cmp	r3, #88	; 0x58
 8000530:	d10f      	bne.n	8000552 <print+0x12e>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	1d1a      	adds	r2, r3, #4
 8000536:	607a      	str	r2, [r7, #4]
 8000538:	6819      	ldr	r1, [r3, #0]
 800053a:	2341      	movs	r3, #65	; 0x41
 800053c:	9302      	str	r3, [sp, #8]
 800053e:	9601      	str	r6, [sp, #4]
 8000540:	9500      	str	r5, [sp, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	2210      	movs	r2, #16
 8000546:	68f8      	ldr	r0, [r7, #12]
 8000548:	f7ff ff00 	bl	800034c <printi>
 800054c:	4603      	mov	r3, r0
 800054e:	441c      	add	r4, r3
				continue;
 8000550:	e033      	b.n	80005ba <print+0x196>
			}
			if( *format == 'u' ) {
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b75      	cmp	r3, #117	; 0x75
 8000558:	d10f      	bne.n	800057a <print+0x156>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	1d1a      	adds	r2, r3, #4
 800055e:	607a      	str	r2, [r7, #4]
 8000560:	6819      	ldr	r1, [r3, #0]
 8000562:	2361      	movs	r3, #97	; 0x61
 8000564:	9302      	str	r3, [sp, #8]
 8000566:	9601      	str	r6, [sp, #4]
 8000568:	9500      	str	r5, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	220a      	movs	r2, #10
 800056e:	68f8      	ldr	r0, [r7, #12]
 8000570:	f7ff feec 	bl	800034c <printi>
 8000574:	4603      	mov	r3, r0
 8000576:	441c      	add	r4, r3
				continue;
 8000578:	e01f      	b.n	80005ba <print+0x196>
			}
			if( *format == 'c' ) {
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b63      	cmp	r3, #99	; 0x63
 8000580:	d11b      	bne.n	80005ba <print+0x196>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	1d1a      	adds	r2, r3, #4
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 800058e:	2300      	movs	r3, #0
 8000590:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8000592:	f107 0114 	add.w	r1, r7, #20
 8000596:	4633      	mov	r3, r6
 8000598:	462a      	mov	r2, r5
 800059a:	68f8      	ldr	r0, [r7, #12]
 800059c:	f7ff fe7e 	bl	800029c <prints>
 80005a0:	4603      	mov	r3, r0
 80005a2:	441c      	add	r4, r3
				continue;
 80005a4:	e009      	b.n	80005ba <print+0x196>
			}
		}
		else {
		out:
 80005a6:	bf00      	nop
 80005a8:	e000      	b.n	80005ac <print+0x188>
			if (*format == '%') goto out;
 80005aa:	bf00      	nop
			printchar (out, *format);
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f7ff fe4e 	bl	8000254 <printchar>
			++pc;
 80005b8:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	3301      	adds	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	f47f af36 	bne.w	8000436 <print+0x12>
 80005ca:	e000      	b.n	80005ce <print+0x1aa>
			if (*format == '\0') break;
 80005cc:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d003      	beq.n	80005dc <print+0x1b8>
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 80005dc:	4623      	mov	r3, r4
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005e8:	080008e8 	.word	0x080008e8

080005ec <my_printf>:

int my_printf(const char *format, ...)
{
 80005ec:	b40f      	push	{r0, r1, r2, r3}
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	6939      	ldr	r1, [r7, #16]
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ff10 	bl	8000424 <print>
 8000604:	4603      	mov	r3, r0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000610:	b004      	add	sp, #16
 8000612:	4770      	bx	lr

08000614 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000624:	e7fe      	b.n	8000624 <HardFault_Handler+0x4>

08000626 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800062a:	e7fe      	b.n	800062a <MemManage_Handler+0x4>

0800062c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000630:	e7fe      	b.n	8000630 <BusFault_Handler+0x4>

08000632 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000636:	e7fe      	b.n	8000636 <UsageFault_Handler+0x4>

08000638 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  //HAL_IncTick();
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <BSP_Console_Init>:
 */

#include "bsp.h"

void BSP_Console_Init()
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <BSP_Console_Init+0xa0>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a25      	ldr	r2, [pc, #148]	; (8000708 <BSP_Console_Init+0xa0>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA0 and PA1 as Alternate function
	GPIOB->MODER &= ~(GPIO_MODER_MODER10_Msk | GPIO_MODER_MODER11_Msk);
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <BSP_Console_Init+0xa4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a23      	ldr	r2, [pc, #140]	; (800070c <BSP_Console_Init+0xa4>)
 800067e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000682:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x02 <<GPIO_MODER_MODER10_Pos) | (0x02 <<GPIO_MODER_MODER11_Pos);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <BSP_Console_Init+0xa4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <BSP_Console_Init+0xa4>)
 800068a:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 800068e:	6013      	str	r3, [r2, #0]

	// Set PB10 and PB11 to AF8 (USART3)
	GPIOB->AFR[1] &= ~(0x0000FF00);
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <BSP_Console_Init+0xa4>)
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <BSP_Console_Init+0xa4>)
 8000696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800069a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=  (0x00007700);
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <BSP_Console_Init+0xa4>)
 800069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a0:	4a1a      	ldr	r2, [pc, #104]	; (800070c <BSP_Console_Init+0xa4>)
 80006a2:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80006a6:	6253      	str	r3, [r2, #36]	; 0x24

	// Enable USART3 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <BSP_Console_Init+0xa0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a16      	ldr	r2, [pc, #88]	; (8000708 <BSP_Console_Init+0xa0>)
 80006ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART3->CR1 = 0x00000000;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <BSP_Console_Init+0xa8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
	USART3->CR2 = 0x00000000;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <BSP_Console_Init+0xa8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
	USART3->CR3 = 0x00000000;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <BSP_Console_Init+0xa8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_USART3SEL_Msk;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <BSP_Console_Init+0xa0>)
 80006c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006cc:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <BSP_Console_Init+0xa0>)
 80006ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	// BRR = 139 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)

	USART3->CR1 &= ~USART_CR1_OVER8_Msk;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <BSP_Console_Init+0xa8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <BSP_Console_Init+0xa8>)
 80006dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006e0:	6013      	str	r3, [r2, #0]
	USART3->BRR = 139;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <BSP_Console_Init+0xa8>)
 80006e4:	228b      	movs	r2, #139	; 0x8b
 80006e6:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <BSP_Console_Init+0xa8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <BSP_Console_Init+0xa8>)
 80006ee:	f043 030c 	orr.w	r3, r3, #12
 80006f2:	6013      	str	r3, [r2, #0]

	// Enable USART2
	USART3->CR1 |= USART_CR1_UE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <BSP_Console_Init+0xa8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a05      	ldr	r2, [pc, #20]	; (8000710 <BSP_Console_Init+0xa8>)
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	40023800 	.word	0x40023800
 800070c:	40020400 	.word	0x40020400
 8000710:	40004800 	.word	0x40004800

08000714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800071a:	490e      	ldr	r1, [pc, #56]	; (8000754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000730:	4c0b      	ldr	r4, [pc, #44]	; (8000760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800073e:	f000 f812 	bl	8000766 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f000 f897 	bl	8000874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000746:	f7ff fd5f 	bl	8000208 <main>
  bx  lr    
 800074a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800074c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000758:	08000908 	.word	0x08000908
  ldr r2, =_sbss
 800075c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000760:	20000020 	.word	0x20000020

08000764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC_IRQHandler>

08000766 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
	...

08000774 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	2302      	movs	r3, #2
 800078c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <SystemCoreClockUpdate+0xec>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f003 030c 	and.w	r3, r3, #12
 8000796:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2b08      	cmp	r3, #8
 800079c:	d011      	beq.n	80007c2 <SystemCoreClockUpdate+0x4e>
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	2b08      	cmp	r3, #8
 80007a2:	d844      	bhi.n	800082e <SystemCoreClockUpdate+0xba>
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <SystemCoreClockUpdate+0x3e>
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d004      	beq.n	80007ba <SystemCoreClockUpdate+0x46>
 80007b0:	e03d      	b.n	800082e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <SystemCoreClockUpdate+0xf0>)
 80007b4:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <SystemCoreClockUpdate+0xf4>)
 80007b6:	601a      	str	r2, [r3, #0]
      break;
 80007b8:	e03d      	b.n	8000836 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <SystemCoreClockUpdate+0xf0>)
 80007bc:	4a2b      	ldr	r2, [pc, #172]	; (800086c <SystemCoreClockUpdate+0xf8>)
 80007be:	601a      	str	r2, [r3, #0]
      break;
 80007c0:	e039      	b.n	8000836 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <SystemCoreClockUpdate+0xec>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	0d9b      	lsrs	r3, r3, #22
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <SystemCoreClockUpdate+0xec>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007d6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00c      	beq.n	80007f8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007de:	4a23      	ldr	r2, [pc, #140]	; (800086c <SystemCoreClockUpdate+0xf8>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <SystemCoreClockUpdate+0xec>)
 80007e8:	6852      	ldr	r2, [r2, #4]
 80007ea:	0992      	lsrs	r2, r2, #6
 80007ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007f0:	fb02 f303 	mul.w	r3, r2, r3
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	e00b      	b.n	8000810 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <SystemCoreClockUpdate+0xf4>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <SystemCoreClockUpdate+0xec>)
 8000802:	6852      	ldr	r2, [r2, #4]
 8000804:	0992      	lsrs	r2, r2, #6
 8000806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <SystemCoreClockUpdate+0xec>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	f003 0303 	and.w	r3, r3, #3
 800081a:	3301      	adds	r3, #1
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	fbb2 f3f3 	udiv	r3, r2, r3
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <SystemCoreClockUpdate+0xf0>)
 800082a:	6013      	str	r3, [r2, #0]
      break;
 800082c:	e003      	b.n	8000836 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <SystemCoreClockUpdate+0xf0>)
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <SystemCoreClockUpdate+0xf4>)
 8000832:	601a      	str	r2, [r3, #0]
      break;
 8000834:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <SystemCoreClockUpdate+0xec>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	091b      	lsrs	r3, r3, #4
 800083c:	f003 030f 	and.w	r3, r3, #15
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <SystemCoreClockUpdate+0xfc>)
 8000842:	5cd3      	ldrb	r3, [r2, r3]
 8000844:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <SystemCoreClockUpdate+0xf0>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	fa22 f303 	lsr.w	r3, r2, r3
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <SystemCoreClockUpdate+0xf0>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	371c      	adds	r7, #28
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	20000000 	.word	0x20000000
 8000868:	00f42400 	.word	0x00f42400
 800086c:	017d7840 	.word	0x017d7840
 8000870:	080008f0 	.word	0x080008f0

08000874 <__libc_init_array>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	4d0d      	ldr	r5, [pc, #52]	; (80008ac <__libc_init_array+0x38>)
 8000878:	4c0d      	ldr	r4, [pc, #52]	; (80008b0 <__libc_init_array+0x3c>)
 800087a:	1b64      	subs	r4, r4, r5
 800087c:	10a4      	asrs	r4, r4, #2
 800087e:	2600      	movs	r6, #0
 8000880:	42a6      	cmp	r6, r4
 8000882:	d109      	bne.n	8000898 <__libc_init_array+0x24>
 8000884:	4d0b      	ldr	r5, [pc, #44]	; (80008b4 <__libc_init_array+0x40>)
 8000886:	4c0c      	ldr	r4, [pc, #48]	; (80008b8 <__libc_init_array+0x44>)
 8000888:	f000 f818 	bl	80008bc <_init>
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	10a4      	asrs	r4, r4, #2
 8000890:	2600      	movs	r6, #0
 8000892:	42a6      	cmp	r6, r4
 8000894:	d105      	bne.n	80008a2 <__libc_init_array+0x2e>
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f855 3b04 	ldr.w	r3, [r5], #4
 800089c:	4798      	blx	r3
 800089e:	3601      	adds	r6, #1
 80008a0:	e7ee      	b.n	8000880 <__libc_init_array+0xc>
 80008a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a6:	4798      	blx	r3
 80008a8:	3601      	adds	r6, #1
 80008aa:	e7f2      	b.n	8000892 <__libc_init_array+0x1e>
 80008ac:	08000900 	.word	0x08000900
 80008b0:	08000900 	.word	0x08000900
 80008b4:	08000900 	.word	0x08000900
 80008b8:	08000904 	.word	0x08000904

080008bc <_init>:
 80008bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008be:	bf00      	nop
 80008c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c2:	bc08      	pop	{r3}
 80008c4:	469e      	mov	lr, r3
 80008c6:	4770      	bx	lr

080008c8 <_fini>:
 80008c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ca:	bf00      	nop
 80008cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ce:	bc08      	pop	{r3}
 80008d0:	469e      	mov	lr, r3
 80008d2:	4770      	bx	lr
